"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import sys
from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BASE_DIR / "apps"))  # ðŸ‘ˆ adds apps/ to Python path

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', "django-insecure-#m17e$1!_ky@zv6bpq_#s^b*caz-sog5pcdi5l44n9y5!39zb#")

CSRF_TRUSTED_ORIGINS = [
    "https://arpan8925-web--8000.prod1.defang.dev",
    "https://*.defang.dev",
    "https://*.defang.io",
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Temporarily enable for debugging

ALLOWED_HOSTS = ["*"]

# Google OAuth2 settings
GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID')
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET')

# Dynamic redirect URI based on environment
if os.getenv('DOCKER_ENV'):
    GOOGLE_OAUTH2_REDIRECT_URI = 'https://arpan8925-web--8000.prod1.defang.dev/auth/google-callback/'
else:
    GOOGLE_OAUTH2_REDIRECT_URI = 'https://arpan8925-web--8000.prod1.defang.dev/auth/google-callback/'

# Allow insecure transport for OAuth in development
if DEBUG:
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

COMING_SOON_TARGET_DATE = "2025-06-25T00:00:00Z"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Required for social auth
    "authentication",
    "frontend",
    "dashboard",
    "apps.brain",  # AI processing engine
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "core.middleware.ComingSoonMiddleware",
    # 'whitenoise.middleware.WhiteNoiseMiddleware',  # Commented out for testing
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Add django-browser-reload only in DEBUG mode
if DEBUG:
    INSTALLED_APPS += ["django_browser_reload"]
    MIDDLEWARE.insert(
        MIDDLEWARE.index("django.middleware.common.CommonMiddleware") + 1,
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    )

# Keep it simple for now - no production optimizations

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "apps" / "frontend" / "templates",
            BASE_DIR / "apps" / "authentication" / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.static",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database - Simple SQLite for production
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Coming soon mode
COMING_SOON = False

# Add SITE_ID setting
SITE_ID = 1

# Sisimpur Brain Configuration
BRAIN_CONFIG = {
    # API Keys
    'GEMINI_API_KEY': os.getenv('GOOGLE_API_KEY'),

    # Rate limiting settings
    'MAX_RETRIES': 5,
    'INITIAL_RETRY_DELAY': 2,  # seconds
    'MAX_RETRY_DELAY': 60,  # seconds
    'RATE_LIMIT_BATCH_SIZE': 3,  # Number of chunks to process before cooling down
    'RATE_LIMIT_COOLDOWN': 10,  # seconds between batches

    # Model settings
    'DEFAULT_GEMINI_MODEL': "models/gemini-1.5-flash",
    'QA_GEMINI_MODEL': "models/gemini-1.5-flash",
    'FALLBACK_GEMINI_MODEL': "models/gemini-1.5-flash",

    # Document processing settings
    'MIN_TEXT_LENGTH': 100,  # Minimum text length to consider a PDF as text-based

    # Question type settings
    'QUESTION_TYPE': "MULTIPLECHOICE",  # Options: "SHORT" or "MULTIPLECHOICE"
    'ANSWER_OPTIONS': 4,  # Number of options for multiple choice questions
}

# File upload settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Brain processing directories
BRAIN_TEMP_DIR = MEDIA_ROOT / 'brain' / 'temp_extracts'
BRAIN_OUTPUT_DIR = MEDIA_ROOT / 'brain' / 'qa_outputs'
BRAIN_UPLOADS_DIR = MEDIA_ROOT / 'brain' / 'uploads'

# Create necessary directories
BRAIN_TEMP_DIR.mkdir(parents=True, exist_ok=True)
BRAIN_OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
BRAIN_UPLOADS_DIR.mkdir(parents=True, exist_ok=True)

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# OTP Configuration - Security Best Practices
OTP_CONFIG = {
    'OTP_LENGTH': 6,
    'OTP_EXPIRY_MINUTES': 5,  # Reduced to 5 minutes for security
    'MAX_OTP_ATTEMPTS': 3,
    'RESEND_COOLDOWN_MINUTES': 2,
    'MAX_HOURLY_ATTEMPTS': 5,  # Rate limiting: 5 OTP requests per hour per email/IP
    'BLOCK_DURATION_HOURS': 1,  # Block duration after exceeding rate limit
    'CLEANUP_INTERVAL_HOURS': 24,  # How often to clean up expired records
}

# Logging configuration for debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
